/*
 * GitHub Gists
 * defaultDescription
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package eu.hohenegger.gister.model;

import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Gist
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-08-16T08:33:00.108Z[GMT]")
public class Gist {
  @JsonProperty("url")
  private String url = null;

  @JsonProperty("forks_url")
  private String forksUrl = null;

  @JsonProperty("commits_url")
  private String commitsUrl = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("node_id")
  private String nodeId = null;

  @JsonProperty("git_pull_url")
  private String gitPullUrl = null;

  @JsonProperty("git_push_url")
  private String gitPushUrl = null;

  @JsonProperty("html_url")
  private String htmlUrl = null;

  @JsonProperty("files")
  private Map<String, GistFile> files = null;

  @JsonProperty("public")
  private Boolean _public = null;

  @JsonProperty("created_at")
  private OffsetDateTime createdAt = null;

  @JsonProperty("updated_at")
  private OffsetDateTime updatedAt = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("comments")
  private Integer comments = null;

  @JsonProperty("user")
  private User user = null;

  @JsonProperty("comments_url")
  private String commentsUrl = null;

  @JsonProperty("owner")
  private User owner = null;

  @JsonProperty("truncated")
  private Boolean truncated = null;

  @JsonProperty("forks")
  private Forks forks = null;

  @JsonProperty("history")
  private History history = null;

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

   /**
   * Get forksUrl
   * @return forksUrl
  **/
  @Schema(description = "")
  public String getForksUrl() {
    return forksUrl;
  }

   /**
   * Get commitsUrl
   * @return commitsUrl
  **/
  @Schema(description = "")
  public String getCommitsUrl() {
    return commitsUrl;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

   /**
   * Get nodeId
   * @return nodeId
  **/
  @Schema(description = "")
  public String getNodeId() {
    return nodeId;
  }

   /**
   * Get gitPullUrl
   * @return gitPullUrl
  **/
  @Schema(description = "")
  public String getGitPullUrl() {
    return gitPullUrl;
  }

   /**
   * Get gitPushUrl
   * @return gitPushUrl
  **/
  @Schema(description = "")
  public String getGitPushUrl() {
    return gitPushUrl;
  }

   /**
   * Get htmlUrl
   * @return htmlUrl
  **/
  @Schema(description = "")
  public String getHtmlUrl() {
    return htmlUrl;
  }

  public Gist files(Map<String, GistFile> files) {
    this.files = files;
    return this;
  }

  public Gist putFilesItem(String key, GistFile filesItem) {
    if (this.files == null) {
      this.files = new HashMap<>();
    }
    this.files.put(key, filesItem);
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @Schema(description = "")
  public Map<String, GistFile> getFiles() {
    return files;
  }

  public void setFiles(Map<String, GistFile> files) {
    this.files = files;
  }

  public Gist _public(Boolean _public) {
    this._public = _public;
    return this;
  }

   /**
   * Get _public
   * @return _public
  **/
  @Schema(description = "")
  public Boolean isPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Schema(description = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @Schema(description = "")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public Gist description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

   /**
   * Get comments
   * @return comments
  **/
  @Schema(description = "")
  public Integer getComments() {
    return comments;
  }

  public Gist user(User user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @Schema(description = "")
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }

   /**
   * Get commentsUrl
   * @return commentsUrl
  **/
  @Schema(description = "")
  public String getCommentsUrl() {
    return commentsUrl;
  }

  public Gist owner(User owner) {
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @Schema(description = "")
  public User getOwner() {
    return owner;
  }

  public void setOwner(User owner) {
    this.owner = owner;
  }

   /**
   * Get truncated
   * @return truncated
  **/
  @Schema(description = "")
  public Boolean isTruncated() {
    return truncated;
  }

  public Gist forks(Forks forks) {
    this.forks = forks;
    return this;
  }

   /**
   * Get forks
   * @return forks
  **/
  @Schema(description = "")
  public Forks getForks() {
    return forks;
  }

  public void setForks(Forks forks) {
    this.forks = forks;
  }

  public Gist history(History history) {
    this.history = history;
    return this;
  }

   /**
   * Get history
   * @return history
  **/
  @Schema(description = "")
  public History getHistory() {
    return history;
  }

  public void setHistory(History history) {
    this.history = history;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Gist gist = (Gist) o;
    return Objects.equals(this.url, gist.url) &&
        Objects.equals(this.forksUrl, gist.forksUrl) &&
        Objects.equals(this.commitsUrl, gist.commitsUrl) &&
        Objects.equals(this.id, gist.id) &&
        Objects.equals(this.nodeId, gist.nodeId) &&
        Objects.equals(this.gitPullUrl, gist.gitPullUrl) &&
        Objects.equals(this.gitPushUrl, gist.gitPushUrl) &&
        Objects.equals(this.htmlUrl, gist.htmlUrl) &&
        Objects.equals(this.files, gist.files) &&
        Objects.equals(this._public, gist._public) &&
        Objects.equals(this.createdAt, gist.createdAt) &&
        Objects.equals(this.updatedAt, gist.updatedAt) &&
        Objects.equals(this.description, gist.description) &&
        Objects.equals(this.comments, gist.comments) &&
        Objects.equals(this.user, gist.user) &&
        Objects.equals(this.commentsUrl, gist.commentsUrl) &&
        Objects.equals(this.owner, gist.owner) &&
        Objects.equals(this.truncated, gist.truncated) &&
        Objects.equals(this.forks, gist.forks) &&
        Objects.equals(this.history, gist.history);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, forksUrl, commitsUrl, id, nodeId, gitPullUrl, gitPushUrl, htmlUrl, files, _public, createdAt, updatedAt, description, comments, user, commentsUrl, owner, truncated, forks, history);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Gist {\n");
    
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    forksUrl: ").append(toIndentedString(forksUrl)).append("\n");
    sb.append("    commitsUrl: ").append(toIndentedString(commitsUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    gitPullUrl: ").append(toIndentedString(gitPullUrl)).append("\n");
    sb.append("    gitPushUrl: ").append(toIndentedString(gitPushUrl)).append("\n");
    sb.append("    htmlUrl: ").append(toIndentedString(htmlUrl)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    commentsUrl: ").append(toIndentedString(commentsUrl)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    truncated: ").append(toIndentedString(truncated)).append("\n");
    sb.append("    forks: ").append(toIndentedString(forks)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
